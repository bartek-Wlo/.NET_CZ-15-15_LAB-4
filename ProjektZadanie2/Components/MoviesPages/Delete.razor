@page "/movies/delete/{id:int}"
@attribute [Authorize]
@rendermode InteractiveServer

@using ProjektZadanie2.Data.Models
@using ProjektZadanie2.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization

@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation

<h3>Delete Movie</h3>

@if (isLoading) // Flaga ładowania
{
    <p><em>Loading movie details...</em></p>
}
else if (movie == null) // Obsługa przypadku, gdy film nie został znaleziony
{
    <div class="alert alert-danger">
        Movie with ID @id not found.
    </div>
    <a href="/movies" class="btn btn-secondary">Back to List</a>
}
else // Film znaleziony, wyświetlamy szczegóły i formularz potwierdzenia
{
    <p>Are you sure you want to delete this movie?</p>

    <div>
        <h4>Movie Details</h4>
        <hr />
        <dl class="row">
            <dt class="col-sm-2">Title:</dt>
            <dd class="col-sm-10">@movie.Title</dd>

            <dt class="col-sm-2">Description:</dt>
            <dd class="col-sm-10">@movie.Description</dd>

            <dt class="col-sm-2">Release Year:</dt>
            <dd class="col-sm-10">@movie.ReleaseYear</dd>

             @* Wyświetl datę tylko jeśli istnieje *@
             @if(movie.ReleaseDate.HasValue)
             {
                 <dt class="col-sm-2">Release Date:</dt>
                 <dd class="col-sm-10">@movie.ReleaseDate.Value.ToShortDateString()</dd>
             }

            @* Wyświetl ocenę tylko jeśli istnieje *@
             @if(movie.Rate.HasValue)
             {
                 <dt class="col-sm-2">Rate:</dt>
                 <dd class="col-sm-10">@movie.Rate.Value</dd>
             }
        </dl>

        @* Formularz do wysłania żądania usunięcia. Używamy standardowego <form> bo nie mamy modelu do walidacji, tylko akcję. *@
        @* Możesz też użyć EditForm z pustym modelem, ale <form> jest prostszy dla samej akcji POST. *@
        <form @onsubmit="ConfirmDelete"> @* Używamy @onsubmit do wywołania metody C# *@
             @* WAŻNE: Dodaj ochronę przed CSRF w formularzach POST *@
             <AntiforgeryToken />
             <button type="submit" class="btn btn-danger">Delete</button>
             <a href="/movies" class="btn btn-secondary">Cancel</a>
        </form>

    </div>
}

@code {
    [Parameter]
    public int id { get; set; } // Parametr routingu dla ID filmu

    private Movie? movie; // Obiekt filmu do usunięcia
    private ApplicationDbContext _dbContext = default!;
    private bool isLoading = true; // Flaga ładowania

    // Używamy OnParametersSetAsync, ponieważ ID pochodzi z parametru routingu
    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        _dbContext = DbFactory.CreateDbContext(); // Utwórz nowy kontekst

        // Pobierz film z bazy danych na podstawie ID
        movie = await _dbContext.Movies.FindAsync(id);

        await _dbContext.DisposeAsync(); // Zwolnij kontekst po użyciu

        isLoading = false;
    }

    // Metoda wywoływana po kliknięciu przycisku Delete w formularzu
    private async Task ConfirmDelete()
    {
        // Sprawdź, czy film istnieje, zanim spróbujesz usunąć
        if (movie != null)
        {
            // Potrzebujemy NOWEJ instancji DbContext do wykonania operacji usunięcia
            using var dbContextForDelete = DbFactory.CreateDbContext();

            // Znajdź obiekt do usunięcia w nowym kontekście lub użyj Attach
            // FindAsync jest bezpieczniejszy, jeśli obiekt mógł zostać zmodyfikowany gdzie indziej
            var movieToDelete = await dbContextForDelete.Movies.FindAsync(movie.Id);

            if (movieToDelete != null)
            {
                dbContextForDelete.Movies.Remove(movieToDelete); // Oznacz obiekt do usunięcia
                await dbContextForDelete.SaveChangesAsync(); // Zapisz zmiany w bazie danych
            }
             // Jeśli movieToDelete == null, oznacza to błąd lub film został już usunięty
        }

        // Niezależnie od tego, czy usunięcie się powiodło, przekieruj użytkownika z powrotem do listy
        Navigation.NavigateTo("/movies");
    }

    // Ważne: Zwolnij DbContext z metody OnParametersSetAsync
     public async void Dispose()
     {
          if (_dbContext != null) await _dbContext.DisposeAsync();
     }
}